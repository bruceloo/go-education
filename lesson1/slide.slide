Introduction to Go
Lesson 1

Charlie Smith

* Who is this guy?
- Development Lead on Smart Lists & Search
- Been working with Go for 2-3 years
- Still a student of the language

* How this course works
- 1-2 topics per week
- Excerises after each topic
- Idea is to give you enough information to get going in Go and then move on to more advanced topics
- Once the basics are covered we will be looking at a package in the standard libary each week.
- The course is interactive and you will have time to complete each section. Please be patient with other devs who may not be as quick as you.
- Instuctions are based on a OSX/Linux envoriments
- I will be giving you links other relavent materals at specfic points during the course

* What is Go?
- Developed by Robert Griesemer, Rob Pike, and Ken Thompson at Google 2007, annouced in 2009
- Garbage collection, memory safety and concurrent features built in
- Designed to bridge the gap between the speed of C++ and the speed in which Python code can be written.
- Go puts a big ephansis on simplcity. Therefore avoids overdesign and the rigid hierarchy of inheritance-based Object orientation

* Recommended links about the origins and goals of Go
- The Go programming Language - Rob Pike [[https://www.youtube.com/watch?v=rKnDgT73v8s]]
- Simplicty is complicated - Rob Pike [[https://www.youtube.com/watch?v=rFejpH_tAHM]]
- 5 things I love about Go - Andrew Gerrand [[https://www.youtube.com/watch?v=fsTOOPB1TBY]]

* First lesson - what we're covering today
- By the end of this session you will be writing a small web service in Go
- Setting up your enviroment
- Go's basic tooling
- Learn about Go's syntax
- TASK - function task
- Control structures
- Storing data
- TASK - Maps excerise
- Flags package 
- TASK - build a service

* Setting up you're Environment

* Installing Go
- If you want to use docker you wont have to follow these steps or indeed the path settings. But I would still recommend following these steps so you understand how to do it.
- Head over to [[https://golang.org/dl/]]
- Install download the installer for your OS or you can do it with curl
- If you using curl you will need place the the source code /usr/local/go on Linux, if you're using windows, don't.
- Fire up a new terminal window and run go version and you should see Go output its version and distro to the terminal

* Go paths
- Go's project layout
.code /code/directory.go

* GOPATH
- This specifys the location of your Go enviroment
- The normal GOPATH is $HOME/go. In Go 1.8 GOPATH will default to this.
- On my mac machine this would be /Users/charlie.smith1/go/src/github.com/user/hello/

* Set up you're GOPATH
1. mkdir $HOME/go
2. Add this line to you're .profile file
.code .profile
3. Run source ~/.profile
4. Running echo $GOPATH from your terminal should now output your GOPATH

* Setting GOBIN
- The bin directory is where your installed programs binarys live
- The standard path for this $GOPATH/bin
- So set it up in your .profile
.code .profilebin
- Again remember to run source ~/.profile and then echo $GOBIN to check if it is set correctly

* Go playground
- You can find it [[https://play.golang.org/][here]]
- You can write quick examples and share these examples with other people
- Easy to try things out

* Go documentation
- Docs for standard libary packages [[https://golang.org/pkg/]]
- Useful go FAQ's [[https://golang.org/doc/faq]]

* Lets write some Go

* Creating a repo for this course
- Throughout the course we will be doing excerises that you will need a repo for 
- So please create a repo (can be public) on you're own username called goexercises
- Eg github.com/yourusername/goexercises
- We will be using this throughout the course

* Go get
- Go get is used to pull in remote packages from source control
- This will download the source code into your local enviroment
- Use this command to download your own empty repo you have just created.
.code run /^go get/
- You should now have a folder structure created for you that looks like this: ~/go/src/github.com/yourusername/goexcerises/

* You're first Go Program!
- Create a new file called main.go in the folder we created on the previus slide
- Add the following code
.play code/hello.go
- We can then build and run this program with 
.code run /^go run main.go/
- You should see the output Hello world! on your terminal

* Go's basic tooling

* The build and run tools
- Go comes with excellent tooling and these are just two.
- Go run builds and then runs a binary for your program and is basically a convenience tool. Those used to dynamically typed languages will probably identify with this.
- go build - builds a binary in my current directory but doesn't run the binary. So the workflow would be slightly different
.code buildandrun /^go build/,/^hello/
- go install - builds a binary and places it in my GOBIN directory I can then run just run my program like this
.code buildandrun /^go install/,/hello/

* Gofmt 
- Great tool that formats your code to a pescribed standard set by the lanauage. Avoids long debates about standards!
- Consider this code
.code code/messy.go
- If we run the below it will format the code automactically for us.
.code run /^gofmt -w main.go/
.code code/neat.go

* Goimports
- Another great tool that increases your speed in wrting go code. The tool automacically adds the packages used in your proram and places the path into your import statement
- Install it with:
.code run /^go get golang.org/
- To run the tool:
.code run /^goimports/

* Goimports example
- Consider the following code
.code code/beforeimported.go
- As you can see the time package is not imported. So if we ran this code we would get an error: undefined: time in time.Now
.code run /^undefined/

* Goimports example continued...
- So we run the tool
.code run /^goimports/
- The code after
.code code/afterimported.go
- Try it yourself

* Add gofmt and goimports to your IDE
- I would recommend running goimports and gofmt on save in your ide.
- All the major IDEs offer plugins to allow you to do this.
- I use vim and vim's is vim-go

* Major IDE go plugins
- Vim: [[https://github.com/fatih/vim-go]]
- Sublime: [[https://github.com/DisposaBoy/GoSublime]]
- Atom: [[https://github.com/joefitzgerald/go-plus]]
- Emacs: [[https://github.com/dominikh/go-mode.el]]
- Visual Studio Code: [[https://github.com/Microsoft/vscode-go]]
- If your editor isnt listed please go here to find it [[https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins]]

* Go's syntax

* Variables
- Variables can initialized in several ways
.play code/variables.go

* Variables continued..
- Variables that are not assigned when declaired default to these zero values
- 0 for numeric types
- false for boolean type
- "" for empty strings

* Functions
- Functions in Go can zero more arguments and they can also return zero or more items
.play code/functions.go
- In the above example the function add takes two ints and returns 1 int
- Take note that we need to declair the return type after the function name

* Functions continued..
- We can also shorten the type declarations, here's an example with the add functions arguments.
.code code/functions2.go

* Functions with multiple return types
- Functions can also have multiple return types consider the following example
.play code/functions3.go
- Notice how we instantiate the two variables here

* Functions with named return types
- You can name your return types on your function declarations
- Consider the following code
.play code/functions4.go
- The return at the end of the split function is whats called a "naked" return
- I would be careful with using this. As it can make complex code harder to read. If you want to use it keep it for very simple functions.

* TASK 
- You need to create 3 functions
- One function takes a int as a param and multiples it by its self.
- One function that returns a string with an int
- One function that has a named return type (your choice of type) with a "naked" return
- You need to create a main function that will call all 3 functions and print the result of each one
- Your program must complile and run successfully

* Types 
- Go is a strongly typed langauge. It cares a lot about type
- Go has the following basic types:
- bool 
- string
- int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr
- byte // alias for uint8
- rune // alias for int32, represents a Unicode code point
- float32, float64
- complex64, complex128

* Types continued..
- Go's syntax demands you are explict about type.
- Whats wrong with this code?
.play -numbers -edit code/types.go

* Type conversions
- You can do type conversions in Go using the Type(value) syntax
- Consider the following example
.play code/type_conversions.go

* Constants 
- In Go constants are declaired like variables just prefixed wuth const keyword
- Consider the following code
.play code/constants.go

* Loops
- Go only has one looping construct and thats "for"
.play code/for.go ///Bog/,/ end/

* Control structures

* If 
- If statements are expressed with no braces (). Curly braces are required {}
.code code/control_structures.go

* Switch
- Switch statements probably look simliar to what you have in other languages
- Switch cases evaluate in order top to bottom, stopping when a case succeeds
.play code/switch.go /{/,/// end/

* Switch without a condition..
.code code/switch.go /// end/,/^}/

* Defer
- Defer defers the execuation of a function till the surronding function returns
- The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns
.play code/defer.go

* Storing data

* Slices
- Slices are like views on the underlying arrays
.play code/slices.go /START OMIT/,/END OMIT/

* Slices continued...
- You can also have slices within slices see below
.play code/slices2.go /START OMIT/,/END OMIT/

* Slices continued...
- To append elements to a slice you can use the standard libaries append function
.play code/slices3.go

* Maps
- Maps are like mulitdimensional arrays in other languages. Great for key value pairs.
.play code/maps.go /START OMIT/,/END OMIT/

* TASK
- Use the go get command to get the excerise repo github.com/chazsmi/mapsexcerise
- Have a Go!

* Flags
- You can pass flags into your programs using the Flags package 
- You can find the docs for the flags package here [[https://golang.org/pkg/flag/]]
.code code/flags.go /START OMIT/,/END OMIT/

* TASK
- Please go get github.com/chazsmi/webservicetask
- We are going to walk through the first task together
- The rest of the tasks are to do in between this week and next week

* Making the response json
- First we are going add a struct and with tags to encode/decode our json
- These tags will name the attributes in the json for you
.code code/webservicetask.go /START OMIT/,/END OMIT/

* Example of json tags
.play -edit code/examplejsontags.go

* Back to our service
.code code/webservicetask2.go /START OMIT/,/END OMIT/

